---
- name: Generate Kubernetes configuration files, also known as kubeconfigs, which enable Kubernetes clients to locate and authenticate to the Kubernetes API Servers
  hosts: localhost
  connection: local
  vars:
    gce_project: "{{ lookup('env','GCE_PROJECT') }}"
    gce_region: "{{ lookup('env','GCE_REGION') }}"
    gce_credentials_file: "{{ lookup('env','GCE_CREDENTIALS') }}"

  tasks:

    - name: Get Kubernetes API server public IP
      gcp_compute_address_facts:
        region: "{{ gce_region }}"
        filters:
          - name = kubernetes-the-hard-way
        project: "{{ gce_project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gce_credentials_file }}"
        scopes: https://www.googleapis.com/auth/compute
      register: kubernetes_public_ip

    - name: Import worker kubeconfig creation tasks
      include_tasks: 05-generate-worker-kubeconfig.yml
      with_sequence: start=0 end=2

    - name: Check if kube-proxy kubeconfig exists
      stat:
        path: files/kube-proxy.kubeconfig
      register: kube_proxy_kubeconfig

    - name: Generage kube-proxy kubeconfig
      block:
        - name: Set kube-proxy cluster in kubeconfig
          command: |
              kubectl config set-cluster kubernetes-the-hard-way \
              --certificate-authority=ca.pem \
              --embed-certs=true \
              --server=https://{{ kubernetes_public_ip['items'].0.address }}:6443 \
              --kubeconfig=kube-proxy.kubeconfig
          args:
            chdir: files

        - name: Set kube-proxy credentials in kubeconfig
          command: |
            kubectl config set-credentials system:kube-proxy \
            --client-certificate=kube-proxy.pem \
            --client-key=kube-proxy-key.pem \
            --embed-certs=true \
            --kubeconfig=kube-proxy.kubeconfig
          args:
            chdir: files

        - name: Set kube-proxy context in kubeconfig
          command: |
            kubectl config set-context default \
            --cluster=kubernetes-the-hard-way \
            --user=system:kube-proxy \
            --kubeconfig=kube-proxy.kubeconfig
          args:
            chdir: files

        - name: Set kube-proxy use context in kubeconfig
          command: kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
          args:
            chdir: files
      when: kube_proxy_kubeconfig.stat.exists == false

    - name: Generate services kubeconfigs
      include_tasks: 05-generate-service-kubeconfig.yml
      with_items:
        - kube-controller-manager
        - kube-scheduler
        - admin

#    - name: Check if kube-controller-manager kubeconfig exists
#      stat:
#        path: files/kube-controller-manager.kubeconfig
#      register: kube_controller_manager_kubeconfig
#
#    - name: Generate a kubeconfig file for the kube-controller-manager service
#      block:
#        - name: Set kube-controller-manager cluster in kubeconfig
#          command: |
#            kubectl config set-cluster kubernetes-the-hard-way \
#            --certificate-authority=ca.pem \
#            --embed-certs=true \
#            --server=https://127.0.0.1:6443 \
#            --kubeconfig=kube-controller-manager.kubeconfig
#          args:
#            chdir: files
#
#        - name: Set kube-controller-manager credentials in kubeconfig
#          command: |
#            kubectl config set-credentials system:kube-controller-manager \
#            --client-certificate=kube-controller-manager.pem \
#            --client-key=kube-controller-manager-key.pem \
#            --embed-certs=true \
#            --kubeconfig=kube-controller-manager.kubeconfig
#          args:
#            chdir: files
#
#        - name: Set kube-controller-manager context in kubeconfig
#          command: |
#            kubectl config set-context default \
#            --cluster=kubernetes-the-hard-way \
#            --user=system:kube-controller-manager \
#            --kubeconfig=kube-controller-manager.kubeconfig
#          args:
#            chdir: files
#      when: kube_controller_manager_kubeconfig.stat.exists == false
#
#    - name: Check if kube-scheduler kubeconfig exists
#      stat:
#        path: files/kube-scheduler.kubeconfig
#      register: kube_scheduler_kubeconfig
#
#    - name: Generate a kubeconfig file for the kube-scheduler service
#      block:
#        - name: Set kube-scheduler cluster in kubeconfig
#          command: |
#            kubectl config set-cluster kubernetes-the-hard-way \
#            --certificate-authority=ca.pem \
#            --embed-certs=true \
#            --server=https://127.0.0.1:6443 \
#            --kubeconfig=kube-scheduler.kubeconfig
#          args:
#            chdir: files
#
#        - name: Set kube-scheduler credentials in kubeconfig
#          command: |
#            kubectl config set-credentials system:kube-scheduler \
#            --client-certificate=kube-scheduler.pem \
#            --client-key=kube-scheduler-key.pem \
#            --embed-certs=true \
#            --kubeconfig=kube-scheduler.kubeconfig
#          args:
#            chdir: files
#
#        - name: Set kube-scheduler context in kubeconfig
#          command: |
#            kubectl config set-context default \
#            --cluster=kubernetes-the-hard-way \
#            --user=system:kube-scheduler \
#            --kubeconfig=kube-scheduler.kubeconfig
#          args:
#            chdir: files
#      when: kube_scheduler_kubeconfig.stat.exists == false
#
#    - name: Check if kube-admin kubeconfig exists
#      stat:
#        path: files/kube-admin.kubeconfig
#      register: kube_admin_kubeconfig
#
#    - name: Generate a kubeconfig file for the kube-admin service
#      block:
#        - name: Set kube-admin cluster in kubeconfig
#          command: |
#            kubectl config set-cluster kubernetes-the-hard-way \
#            --certificate-authority=ca.pem \
#            --embed-certs=true \
#            --server=https://127.0.0.1:6443 \
#            --kubeconfig=admin.kubeconfig
#          args:
#            chdir: files
#
#        - name: Set kube-scheduler credentials in kubeconfig
#          command: |
#            kubectl config set-credentials system:kube-scheduler \
#            --client-certificate=kube-scheduler.pem \
#            --client-key=kube-scheduler-key.pem \
#            --embed-certs=true \
#            --kubeconfig=kube-scheduler.kubeconfig
#          args:
#            chdir: files
#
#        - name: Set kube-scheduler context in kubeconfig
#          command: |
#            kubectl config set-context default \
#            --cluster=kubernetes-the-hard-way \
#            --user=system:kube-scheduler \
#            --kubeconfig=kube-scheduler.kubeconfig
#          args:
#            chdir: files
#      when: kube_scheduler_kubeconfig.stat.exists == false
#
