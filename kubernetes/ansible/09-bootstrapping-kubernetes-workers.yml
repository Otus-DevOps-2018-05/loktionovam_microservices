- name: Bootstrap Kubernetes worker nodes
  hosts: tag_worker

  vars:
    gce_project: "{{ lookup('env','GCE_PROJECT') }}"
    gce_region: "{{ lookup('env','GCE_REGION') }}"
    gce_credentials_file: "{{ lookup('env','GCE_CREDENTIALS') }}"

  tasks:

    - name:  Get worker gcp fact
      gcp_compute_instance_facts:
        zone: "{{ gce_region }}-b"
        filters:
          - name = {{ inventory_hostname }}
        project: "{{ gce_project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gce_credentials_file }}"
        scopes: https://www.googleapis.com/auth/compute
      delegate_to: localhost
      register: worker_stat

    - name: Retrieve the Pod CIDR range for the current compute instance
      set_fact:
        pod_cidr: "{{ item.value }}"
      with_items:
        - "{{ worker_stat['items'].0.metadata['items'] }}"
      when: item.key == 'pod-cidr'

    - name: Bootstrap Kubernetes worker nodes
      block:

        - name: Install OS dependencies
          apt:
            name: ['socat', 'conntrack', 'ipset']
            cache_valid_time: 84600

        - name: Create the installation directories
          file:
            path: "{{ item }}"
            state: directory
          with_items:
            - /etc/cni/net.d
            - /opt/cni/bin
            - /var/lib/kubelet
            - /var/lib/kube-proxy
            - /var/lib/kubernetes
            - /var/run/kubernetes
            - /etc/containerd

        - name: Download the official Kubernetes release binaries
          get_url:
            url: https://storage.googleapis.com/kubernetes-release/release/v1.12.0/bin/linux/amd64/{{ item }}
            dest: /usr/local/bin/{{ item }}
            mode: 0755
          with_items:
            - kubectl
            - kube-proxy
            - kubelet

        - name: Install runsc
          get_url:
            url: https://storage.googleapis.com/kubernetes-the-hard-way/runsc-50c283b9f56bb7200938d9e207355f05f79f0d17
            dest: /usr/local/bin/runsc
            mode: 0755

        - name: Install runc
          get_url:
            url: https://github.com/opencontainers/runc/releases/download/v1.0.0-rc5/runc.amd64
            dest: /usr/local/bin/runc
            mode: 0755

        - name: Install crictl
          unarchive:
            src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.12.0/crictl-v1.12.0-linux-amd64.tar.gz
            dest: /usr/local/bin
            remote_src: true

        - name: Install cni-plugins
          unarchive:
            src: https://github.com/containernetworking/plugins/releases/download/v0.6.0/cni-plugins-amd64-v0.6.0.tgz
            dest: /opt/cni/bin
            remote_src: true

        - name: Install containerd
          unarchive:
            src:   https://github.com/containerd/containerd/releases/download/v1.2.0-rc.0/containerd-1.2.0-rc.0.linux-amd64.tar.gz
            dest: /
            remote_src: true

        - name: Create the bridge and loopback network configuration files
          template:
            src: "{{ item }}.j2"
            dest: "/etc/cni/net.d/{{ item }}"
          with_items:
            - '10-bridge.conf'
            - '99-loopback.conf'

        - name: Copy containerd configuration file
          copy:
            src: config.toml
            dest: /etc/containerd/config.toml
          notify: restart containerd

        - name: Create the containerd.service systemd unit file
          copy:
            src: containerd.service
            dest: /etc/systemd/system/containerd.service
          notify: restart containerd

        - name: Copy kubelet certificates, keys, configuration file
          copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
          with_items:
            - { src: "{{ inventory_hostname}}-key.pem",  dest: "/var/lib/kubelet/{{ inventory_hostname}}-key.pem" }
            - { src: "{{ inventory_hostname}}.pem",  dest: "/var/lib/kubelet/{{ inventory_hostname}}.pem" }
            - { src: "{{ inventory_hostname}}.kubeconfig",  dest: "/var/lib/kubelet/kubeconfig" }
            - { src: "ca.pem",  dest: "/var/lib/kubernetes/ca.pem" }
          no_log: true
          notify: restart kubelet

        - name: Copy the kubelet-config.yaml configuration file
          template:
            src: kubelet-config.yaml.j2
            dest: /var/lib/kubelet/kubelet-config.yaml
          notify: restart kubelet

        - name: Create the kubelet.service systemd unit file
          copy:
            src: kubelet.service
            dest: /etc/systemd/system/kubelet.service
          notify: restart kubelet

        - name: Copy kube-proxy kubeconfig
          copy:
            src: kube-proxy.kubeconfig
            dest: /var/lib/kube-proxy/kubeconfig
          notify: restart kube-proxy

        - name: Create the kube-proxy-config.yaml configuration file
          copy:
            src: kube-proxy-config.yaml
            dest: /var/lib/kube-proxy/kube-proxy-config.yaml
          notify: restart kube-proxy

        - name: Create the kube-proxy.service systemd unit file
          copy:
            src: kube-proxy.service
            dest: /etc/systemd/system/kube-proxy.service
          notify: restart kube-proxy
      become: true

  handlers:

    - name: restart kubelet
      systemd:
         name: kubelet.service
         enabled: true
         daemon_reload: true
         state: restarted
      become: true

    - name: restart containerd
      systemd:
         name: containerd.service
         enabled: true
         daemon_reload: true
         state: restarted
      become: true

    - name: restart kube-proxy
      systemd:
         name: kube-proxy.service
         enabled: true
         daemon_reload: true
         state: restarted
      become: true
